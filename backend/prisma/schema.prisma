generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id            Int     @id @default(autoincrement())
  firstName     String
  lastName      String
  streetAddress String
  city          String
  state         String
  zipCode       String
  mobile        String
  userId        Int
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order         Order[]
}

model Cart {
  id                   Int        @id @default(autoincrement())
  userId               Int        @unique
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems            CartItem[]
  totalPrice           Int        @default(0) // Stored in paise
  totalItem            Int        @default(0)
  totalDiscountedPrice Int        @default(0) // Stored in paise
  discount             Int        @default(0) // Stored in paise
}

model CartItem {
  id              Int     @id @default(autoincrement())
  cartId          Int
  cart            Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId       Int
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId          Int
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  size            String
  quantity        Int     @default(1)
  price           Int // Stored in paise
  discountedPrice Int // Stored in paise
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String     @db.VarChar(50)
  parentCategory   Category?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  parentCategoryId Int?
  level            Int
  Category         Category[] @relation("CategoryHierarchy")
  Product          Product[]
}

model Order {
  id                   Int             @id @default(autoincrement())
  userId               Int
  user                 User            @relation(fields: [userId], references: [id])
  orderItems           OrderItem[] // One-to-Many Relationship
  shippingAddressId    Int?
  shippingAddress      Address?        @relation(fields: [shippingAddressId], references: [id])
  orderDate            DateTime
  deliveryDate         DateTime?
  payments             PaymentDetail[]
  totalPrice           Int // Stored in paise
  totalDiscountedPrice Int // Stored in paise
  discount             Int // Stored in paise
  orderStatus          String
  totalItem            Int
  createdAt            DateTime        @default(now())
}

model PaymentDetail {
  id            Int     @id @default(autoincrement())
  orderId       Int
  order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userId        Int
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMethod String?
  transactionId String?
  paymentId     String?
  paymentStatus String?
}

model OrderItem {
  id              Int       @id @default(autoincrement())
  productId       Int
  product         Product   @relation(fields: [productId], references: [id])
  size            String?
  quantity        Int
  price           Int // Stored in paise
  discountedPrice Int // Stored in paise
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  orderId         Int
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  deliveryDate    DateTime?
}

model Product {
  id              Int         @id @default(autoincrement())
  title           String?
  description     String?
  price           Int? // Stored in paise
  discountedPrice Int? // Stored in paise
  discountPercent Decimal?
  quantity        Int?
  brand           String?
  color           Color[]
  sizes           Size[]
  imageUrl        String?
  numRatings      Int         @default(0)
  categoryId      Int?
  category        Category?   @relation(fields: [categoryId], references: [id])
  createdAt       DateTime    @default(now())
  ratings         Rating[]
  reviews         Review[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
}

model Size {
  id        Int     @id @default(autoincrement())
  name      String
  quantity  Int
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Color {
  id        Int     @id @default(autoincrement())
  name      String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  rating    Decimal
  createdAt DateTime @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  review    String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model User {
  id         Int             @id @default(autoincrement())
  firstName  String
  lastName   String?
  password   String?
  email      String          @unique
  role       String          @default("CUSTOMER")
  mobile     String?
  googleId   String?         @unique
  profilePic String?
  addresses  Address[]
  ratings    Rating[]
  reviews    Review[]
  orderItems OrderItem[]
  cart       Cart?
  cartItems  CartItem[]
  payments   PaymentDetail[]
  orders     Order[]
  createdAt  DateTime        @default(now())
}
